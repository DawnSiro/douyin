// Code generated by Validator v0.1.4. DO NOT EDIT.

package api

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DouyinCommentActionRequest) IsValid() error {
	if p.VideoID <= int64(0) {
		return fmt.Errorf("field VideoID gt rule failed, current value: %v", p.VideoID)
	}
	_src := []int32{int32(1), int32(2)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int32(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	if p.CommentID != nil {
		if *p.CommentID <= int64(0) {
			return fmt.Errorf("field CommentID gt rule failed, current value: %v", *p.CommentID)
		}
	}
	return nil
}
func (p *DouyinCommentActionResponse) IsValid() error {
	if p.Comment != nil {
		if err := p.Comment.IsValid(); err != nil {
			return fmt.Errorf("filed Comment not valid, %w", err)
		}
	}
	return nil
}
func (p *DouyinCommentListRequest) IsValid() error {
	if p.VideoID <= int64(0) {
		return fmt.Errorf("field VideoID gt rule failed, current value: %v", p.VideoID)
	}
	return nil
}
func (p *DouyinCommentListResponse) IsValid() error {
	return nil
}
func (p *Comment) IsValid() error {
	if p.ID <= int64(0) {
		return fmt.Errorf("field ID gt rule failed, current value: %v", p.ID)
	}
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *User) IsValid() error {
	if p.ID <= int64(0) {
		return fmt.Errorf("field ID gt rule failed, current value: %v", p.ID)
	}
	if p.FollowCount != nil {
		if *p.FollowCount <= int64(0) {
			return fmt.Errorf("field FollowCount gt rule failed, current value: %v", *p.FollowCount)
		}
	}
	if p.FollowerCount != nil {
		if *p.FollowerCount <= int64(0) {
			return fmt.Errorf("field FollowerCount gt rule failed, current value: %v", *p.FollowerCount)
		}
	}
	return nil
}
func (p *DouyinFavoriteActionRequest) IsValid() error {
	if p.VideoID <= int64(0) {
		return fmt.Errorf("field VideoID gt rule failed, current value: %v", p.VideoID)
	}
	_src := []int32{int32(1), int32(2)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int32(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	return nil
}
func (p *DouyinFavoriteActionResponse) IsValid() error {
	return nil
}
func (p *DouyinFavoriteListRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinFavoriteListResponse) IsValid() error {
	return nil
}
func (p *Video) IsValid() error {
	if p.ID <= int64(0) {
		return fmt.Errorf("field ID gt rule failed, current value: %v", p.ID)
	}
	if p.Author != nil {
		if err := p.Author.IsValid(); err != nil {
			return fmt.Errorf("filed Author not valid, %w", err)
		}
	}
	if len(p.Title) > int(60) {
		return fmt.Errorf("field Title max_len rule failed, current value: %d", len(p.Title))
	}
	return nil
}
func (p *DouyinFeedRequest) IsValid() error {
	return nil
}
func (p *DouyinFeedResponse) IsValid() error {
	return nil
}
func (p *DouyinMessageChatRequest) IsValid() error {
	if p.ToUserID <= int64(0) {
		return fmt.Errorf("field ToUserID gt rule failed, current value: %v", p.ToUserID)
	}
	return nil
}
func (p *DouyinMessageChatResponse) IsValid() error {
	return nil
}
func (p *Message) IsValid() error {
	if p.ID <= int64(0) {
		return fmt.Errorf("field ID gt rule failed, current value: %v", p.ID)
	}
	if p.ToUserID <= int64(0) {
		return fmt.Errorf("field ToUserID gt rule failed, current value: %v", p.ToUserID)
	}
	if p.FromUserID <= int64(0) {
		return fmt.Errorf("field FromUserID gt rule failed, current value: %v", p.FromUserID)
	}
	return nil
}
func (p *DouyinMessageActionRequest) IsValid() error {
	if p.ToUserID <= int64(0) {
		return fmt.Errorf("field ToUserID gt rule failed, current value: %v", p.ToUserID)
	}
	_src := []int32{int32(1)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int32(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	return nil
}
func (p *DouyinMessageActionResponse) IsValid() error {
	return nil
}
func (p *DouyinPublishActionRequest) IsValid() error {
	return nil
}
func (p *DouyinPublishActionResponse) IsValid() error {
	return nil
}
func (p *DouyinPublishListRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinPublishListResponse) IsValid() error {
	return nil
}
func (p *DouyinRelationActionRequest) IsValid() error {
	if p.ToUserID <= int64(0) {
		return fmt.Errorf("field ToUserID gt rule failed, current value: %v", p.ToUserID)
	}
	_src := []int32{int32(1), int32(2)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int32(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	return nil
}
func (p *DouyinRelationActionResponse) IsValid() error {
	return nil
}
func (p *DouyinRelationFollowListRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinRelationFollowListResponse) IsValid() error {
	return nil
}
func (p *DouyinRelationFollowerListRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinRelationFollowerListResponse) IsValid() error {
	return nil
}
func (p *DouyinRelationFriendListRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinRelationFriendListResponse) IsValid() error {
	return nil
}
func (p *FriendUser) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("filed Base not valid, %w", err)
		}
	}
	_src := []int64{int64(1), int64(2)}
	var _exist bool
	for _, src := range _src {
		if p.MsgType == int64(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field MsgType in rule failed, current value: %v", p.MsgType)
	}
	return nil
}
func (p *DouyinUserRegisterRequest) IsValid() error {
	if len(p.Username) < int(2) {
		return fmt.Errorf("field Username min_len rule failed, current value: %d", len(p.Username))
	}
	if len(p.Username) > int(32) {
		return fmt.Errorf("field Username max_len rule failed, current value: %d", len(p.Username))
	}
	if len(p.Password) < int(6) {
		return fmt.Errorf("field Password min_len rule failed, current value: %d", len(p.Password))
	}
	if len(p.Password) > int(32) {
		return fmt.Errorf("field Password max_len rule failed, current value: %d", len(p.Password))
	}
	_src := "[0-9A-Za-z]+"
	if ok, _ := regexp.MatchString(_src, p.Password); !ok {
		return fmt.Errorf("field Password pattern rule failed, current value: %v", p.Password)
	}
	return nil
}
func (p *DouyinUserRegisterResponse) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinUserLoginRequest) IsValid() error {
	if len(p.Username) < int(2) {
		return fmt.Errorf("field Username min_len rule failed, current value: %d", len(p.Username))
	}
	if len(p.Username) > int(32) {
		return fmt.Errorf("field Username max_len rule failed, current value: %d", len(p.Username))
	}
	if len(p.Password) < int(6) {
		return fmt.Errorf("field Password min_len rule failed, current value: %d", len(p.Password))
	}
	if len(p.Password) > int(32) {
		return fmt.Errorf("field Password max_len rule failed, current value: %d", len(p.Password))
	}
	return nil
}
func (p *DouyinUserLoginResponse) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinUserRequest) IsValid() error {
	if p.UserID <= int64(0) {
		return fmt.Errorf("field UserID gt rule failed, current value: %v", p.UserID)
	}
	return nil
}
func (p *DouyinUserResponse) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
