// Code generated by Validator v0.1.4. DO NOT EDIT.

package comment

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DouyinCommentActionRequest) IsValid() error {
	if p.VideoId <= int64(0) {
		return fmt.Errorf("field VideoId gt rule failed, current value: %v", p.VideoId)
	}
	_src := []int8{int8(1), int8(2)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int8(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	if p.CommentText != nil {
		if len(*p.CommentText) < int(1) {
			return fmt.Errorf("field CommentText min_len rule failed, current value: %d", len(*p.CommentText))
		}
		if len(*p.CommentText) > int(255) {
			return fmt.Errorf("field CommentText max_len rule failed, current value: %d", len(*p.CommentText))
		}
	}
	if p.CommentId != nil {
		if *p.CommentId <= int64(0) {
			return fmt.Errorf("field CommentId gt rule failed, current value: %v", *p.CommentId)
		}
	}
	return nil
}
func (p *DouyinCommentActionResponse) IsValid() error {
	if p.Comment != nil {
		if err := p.Comment.IsValid(); err != nil {
			return fmt.Errorf("filed Comment not valid, %w", err)
		}
	}
	return nil
}
func (p *DouyinCommentListRequest) IsValid() error {
	if p.VideoId <= int64(0) {
		return fmt.Errorf("field VideoId gt rule failed, current value: %v", p.VideoId)
	}
	return nil
}
func (p *DouyinCommentListResponse) IsValid() error {
	return nil
}
func (p *Comment) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *User) IsValid() error {
	return nil
}
