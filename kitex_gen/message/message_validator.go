// Code generated by Validator v0.1.4. DO NOT EDIT.

package message

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DouyinMessageChatRequest) IsValid() error {
	if p.ToUserId <= int64(0) {
		return fmt.Errorf("field ToUserId gt rule failed, current value: %v", p.ToUserId)
	}
	return nil
}
func (p *DouyinMessageChatResponse) IsValid() error {
	return nil
}
func (p *Message) IsValid() error {
	return nil
}
func (p *DouyinMessageActionRequest) IsValid() error {
	if p.ToUserId <= int64(0) {
		return fmt.Errorf("field ToUserId gt rule failed, current value: %v", p.ToUserId)
	}
	_src := []int8{int8(1)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int8(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	if len(p.Content) < int(1) {
		return fmt.Errorf("field Content min_len rule failed, current value: %d", len(p.Content))
	}
	if len(p.Content) > int(255) {
		return fmt.Errorf("field Content max_len rule failed, current value: %d", len(p.Content))
	}
	return nil
}
func (p *DouyinMessageActionResponse) IsValid() error {
	return nil
}
