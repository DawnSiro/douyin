// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	message "douyin/kitex_gen/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendMessage":    kitex.NewMethodInfo(sendMessageHandler, newMessageServiceSendMessageArgs, newMessageServiceSendMessageResult, false),
		"GetMessageChat": kitex.NewMethodInfo(getMessageChatHandler, newMessageServiceGetMessageChatArgs, newMessageServiceGetMessageChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceSendMessageArgs)
	realResult := result.(*message.MessageServiceSendMessageResult)
	success, err := handler.(message.MessageService).SendMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSendMessageArgs() interface{} {
	return message.NewMessageServiceSendMessageArgs()
}

func newMessageServiceSendMessageResult() interface{} {
	return message.NewMessageServiceSendMessageResult()
}

func getMessageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetMessageChatArgs)
	realResult := result.(*message.MessageServiceGetMessageChatResult)
	success, err := handler.(message.MessageService).GetMessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetMessageChatArgs() interface{} {
	return message.NewMessageServiceGetMessageChatArgs()
}

func newMessageServiceGetMessageChatResult() interface{} {
	return message.NewMessageServiceGetMessageChatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, req *message.DouyinMessageActionRequest) (r *message.DouyinMessageActionResponse, err error) {
	var _args message.MessageServiceSendMessageArgs
	_args.Req = req
	var _result message.MessageServiceSendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageChat(ctx context.Context, req *message.DouyinMessageChatRequest) (r *message.DouyinMessageChatResponse, err error) {
	var _args message.MessageServiceGetMessageChatArgs
	_args.Req = req
	var _result message.MessageServiceGetMessageChatResult
	if err = p.c.Call(ctx, "GetMessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
